// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for PageOrderDir.
const (
	Asc  PageOrderDir = "asc"
	Desc PageOrderDir = "desc"
)

// DatumMixin defines model for DatumMixin.
type DatumMixin struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// HealthState defines model for HealthState.
type HealthState struct {
	Health  bool   `json:"health"`
	Message string `json:"message"`
}

// HealthStates defines model for HealthStates.
type HealthStates map[string]HealthState

// IdMixin defines model for IdMixin.
type IdMixin struct {
	Id *int `json:"id,omitempty"`
}

// PageLimit defines model for PageLimit.
type PageLimit = int64

// PageMetadata defines model for PageMetadata.
type PageMetadata struct {
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
	Total  *int `json:"total,omitempty"`
}

// PageOffset defines model for PageOffset.
type PageOffset = int64

// PageOrderBy defines model for PageOrderBy.
type PageOrderBy = string

// PageOrderDir defines model for PageOrderDir.
type PageOrderDir string

// User defines model for User.
type User struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	DateOfBirth *time.Time `json:"date_of_birth,omitempty"`
	Description *string    `json:"description,omitempty"`
	FirstName   *string    `json:"first_name,omitempty"`
	Id          *int       `json:"id,omitempty"`
	LastName    *string    `json:"last_name,omitempty"`
	Roles       *[]string  `json:"roles,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	Username    *string    `json:"username,omitempty"`
}

// UserCreator defines model for UserCreator.
type UserCreator struct {
	DateOfBirth *time.Time `json:"date_of_birth,omitempty"`
	Description *string    `json:"description,omitempty"`
	FirstName   string     `json:"first_name"`
	LastName    string     `json:"last_name"`
	Username    string     `json:"username"`
}

// GatewayConnectParams defines parameters for GatewayConnect.
type GatewayConnectParams struct {
	Token string `form:"token" json:"token"`
}

// UsersParams defines parameters for Users.
type UsersParams struct {
	Q        *string       `form:"q,omitempty" json:"q,omitempty"`
	Offset   *PageOffset   `form:"offset,omitempty" json:"offset,omitempty"`
	Limit    *PageLimit    `form:"limit,omitempty" json:"limit,omitempty"`
	OrderBy  *PageOrderBy  `form:"order_by,omitempty" json:"order_by,omitempty"`
	OrderDir *PageOrderDir `form:"order_dir,omitempty" json:"order_dir,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreator

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GatewayConnect request
	GatewayConnect(ctx context.Context, params *GatewayConnectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Healthcheck request
	Healthcheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Panic request
	Panic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Users request
	Users(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GatewayConnect(ctx context.Context, params *GatewayConnectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGatewayConnectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Healthcheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthcheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Panic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPanicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Users(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGatewayConnectRequest generates requests for GatewayConnect
func NewGatewayConnectRequest(server string, params *GatewayConnectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthcheckRequest generates requests for Healthcheck
func NewHealthcheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPanicRequest generates requests for Panic
func NewPanicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/panic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersRequest generates requests for Users
func NewUsersRequest(server string, params *UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderDir != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_dir", runtime.ParamLocationQuery, *params.OrderDir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GatewayConnect request
	GatewayConnectWithResponse(ctx context.Context, params *GatewayConnectParams, reqEditors ...RequestEditorFn) (*GatewayConnectResponse, error)

	// Healthcheck request
	HealthcheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthcheckResponse, error)

	// Panic request
	PanicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PanicResponse, error)

	// Users request
	UsersWithResponse(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*UsersResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)
}

type GatewayConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GatewayConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GatewayConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthStates
}

// Status returns HTTPResponse.Status
func (r HealthcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PanicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PanicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PanicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Metadata *PageMetadata `json:"metadata,omitempty"`
		Users    *[]User       `json:"users,omitempty"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSON409      *Error
	JSON422      *Error
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GatewayConnectWithResponse request returning *GatewayConnectResponse
func (c *ClientWithResponses) GatewayConnectWithResponse(ctx context.Context, params *GatewayConnectParams, reqEditors ...RequestEditorFn) (*GatewayConnectResponse, error) {
	rsp, err := c.GatewayConnect(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGatewayConnectResponse(rsp)
}

// HealthcheckWithResponse request returning *HealthcheckResponse
func (c *ClientWithResponses) HealthcheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthcheckResponse, error) {
	rsp, err := c.Healthcheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthcheckResponse(rsp)
}

// PanicWithResponse request returning *PanicResponse
func (c *ClientWithResponses) PanicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PanicResponse, error) {
	rsp, err := c.Panic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePanicResponse(rsp)
}

// UsersWithResponse request returning *UsersResponse
func (c *ClientWithResponses) UsersWithResponse(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*UsersResponse, error) {
	rsp, err := c.Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// ParseGatewayConnectResponse parses an HTTP response from a GatewayConnectWithResponse call
func ParseGatewayConnectResponse(rsp *http.Response) (*GatewayConnectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GatewayConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseHealthcheckResponse parses an HTTP response from a HealthcheckWithResponse call
func ParseHealthcheckResponse(rsp *http.Response) (*HealthcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthStates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePanicResponse parses an HTTP response from a PanicWithResponse call
func ParsePanicResponse(rsp *http.Response) (*PanicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PanicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersResponse parses an HTTP response from a UsersWithResponse call
func ParseUsersResponse(rsp *http.Response) (*UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Metadata *PageMetadata `json:"metadata,omitempty"`
			Users    *[]User       `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /gateway)
	GatewayConnect(ctx echo.Context, params GatewayConnectParams) error

	// (GET /health)
	Healthcheck(ctx echo.Context) error

	// (GET /panic)
	Panic(ctx echo.Context) error

	// (GET /users)
	Users(ctx echo.Context, params UsersParams) error

	// (POST /users)
	CreateUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GatewayConnect converts echo context to params.
func (w *ServerInterfaceWrapper) GatewayConnect(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GatewayConnectParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GatewayConnect(ctx, params)
	return err
}

// Healthcheck converts echo context to params.
func (w *ServerInterfaceWrapper) Healthcheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthcheck(ctx)
	return err
}

// Panic converts echo context to params.
func (w *ServerInterfaceWrapper) Panic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Panic(ctx)
	return err
}

// Users converts echo context to params.
func (w *ServerInterfaceWrapper) Users(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Optional query parameter "order_dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_dir", ctx.QueryParams(), &params.OrderDir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_dir: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Users(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/gateway", wrapper.GatewayConnect)
	router.GET(baseURL+"/health", wrapper.Healthcheck)
	router.GET(baseURL+"/panic", wrapper.Panic)
	router.GET(baseURL+"/users", wrapper.Users)
	router.POST(baseURL+"/users", wrapper.CreateUser)

}

type GatewayConnectRequestObject struct {
	Params GatewayConnectParams
}

type GatewayConnectResponseObject interface {
	VisitGatewayConnectResponse(w http.ResponseWriter) error
}

type GatewayConnect101Response struct {
}

func (response GatewayConnect101Response) VisitGatewayConnectResponse(w http.ResponseWriter) error {
	w.WriteHeader(101)
	return nil
}

type GatewayConnect401JSONResponse Error

func (response GatewayConnect401JSONResponse) VisitGatewayConnectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type HealthcheckRequestObject struct {
}

type HealthcheckResponseObject interface {
	VisitHealthcheckResponse(w http.ResponseWriter) error
}

type Healthcheck200JSONResponse HealthStates

func (response Healthcheck200JSONResponse) VisitHealthcheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Healthcheck500Response struct {
}

func (response Healthcheck500Response) VisitHealthcheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PanicRequestObject struct {
}

type PanicResponseObject interface {
	VisitPanicResponse(w http.ResponseWriter) error
}

type Panic500Response struct {
}

func (response Panic500Response) VisitPanicResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UsersRequestObject struct {
	Params UsersParams
}

type UsersResponseObject interface {
	VisitUsersResponse(w http.ResponseWriter) error
}

type Users200JSONResponse struct {
	Metadata *PageMetadata `json:"metadata,omitempty"`
	Users    *[]User       `json:"users,omitempty"`
}

func (response Users200JSONResponse) VisitUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Users404JSONResponse Error

func (response Users404JSONResponse) VisitUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Users500Response struct {
}

func (response Users500Response) VisitUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse User

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser409JSONResponse Error

func (response CreateUser409JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser422JSONResponse Error

func (response CreateUser422JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500Response struct {
}

func (response CreateUser500Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /gateway)
	GatewayConnect(ctx context.Context, request GatewayConnectRequestObject) (GatewayConnectResponseObject, error)

	// (GET /health)
	Healthcheck(ctx context.Context, request HealthcheckRequestObject) (HealthcheckResponseObject, error)

	// (GET /panic)
	Panic(ctx context.Context, request PanicRequestObject) (PanicResponseObject, error)

	// (GET /users)
	Users(ctx context.Context, request UsersRequestObject) (UsersResponseObject, error)

	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GatewayConnect operation middleware
func (sh *strictHandler) GatewayConnect(ctx echo.Context, params GatewayConnectParams) error {
	var request GatewayConnectRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GatewayConnect(ctx.Request().Context(), request.(GatewayConnectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GatewayConnect")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GatewayConnectResponseObject); ok {
		return validResponse.VisitGatewayConnectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Healthcheck operation middleware
func (sh *strictHandler) Healthcheck(ctx echo.Context) error {
	var request HealthcheckRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Healthcheck(ctx.Request().Context(), request.(HealthcheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Healthcheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthcheckResponseObject); ok {
		return validResponse.VisitHealthcheckResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Panic operation middleware
func (sh *strictHandler) Panic(ctx echo.Context) error {
	var request PanicRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Panic(ctx.Request().Context(), request.(PanicRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Panic")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PanicResponseObject); ok {
		return validResponse.VisitPanicResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Users operation middleware
func (sh *strictHandler) Users(ctx echo.Context, params UsersParams) error {
	var request UsersRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Users(ctx.Request().Context(), request.(UsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Users")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UsersResponseObject); ok {
		return validResponse.VisitUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx echo.Context) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.Request().Context(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		return validResponse.VisitCreateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYb2/buA/+KoR+P2Bvsjjtegcsr+62FbsO67VAby8Ou6JgbNpWK0ueRCcLhn73A2Xn",
	"X+1kKbDdu9iiHj0kH1J0vqnUVbWzZDmo6TcV0pIqjD/fITfVpf6qrTzV3tXkWVNcSz0hU3aHLE+585X8",
	"UhkyvWRdkRopXtakpiqw17ZQjyPV1Nkz9zyu37jZPaUsKOfeOz9AyGW0A6stvzrdQGrLVJAXhIpCwCJa",
	"98/z9KXRnjI1/dxibuxvB9j8QWi4vGFk6nMq4+LWOTPnDKF9FokO5Gga8WTMMs3aWTTXO4z+7ylXU/W/",
	"ZJP0pMt4su3KUOAvsj1a0NmWF+s4D0FcY0EfdaX5aaZ+PRvMlNhfEmOGjP1zzRDSII7L80DHmbJjNEdY",
	"7nPvavCoA/5d+Yz8m+WAELbW3+koebJNJZrAkKqRyiikogbbGIMzQ2rKvqGBwvsUKG5HY65yNf18WAer",
	"PD+ODttttQcx3c2NFPWdy+9m2rcVMFjuVn+HubjodS1SHgxQrn3gO4sVDS4bPLTqnekEzFSFQZPuBXqP",
	"y9jCAvk9eH1B3Hahfyu9cqhnHRek/zYohz3cbkxry50Tt/H7nUowtM1d27EtYxpLhSrURk3VXNuULP9W",
	"yY9x7kUikYuaV2qkGi9GM+OK8driaTzU5RKuyQfpffDBNd6i+ccKLZ2SDdGvDvP3GtOS4HQ8WWOXzHWY",
	"JslisRhjXB47XyTd3pB8vHh7/ufN+cvT8WRccmWiRshX4Sq/IT/XKXUg0yQJCywK8mPtkmiSSC41i9rV",
	"5fUHNVJz8qElfTKejCexU9VksdZqql7FVyNVI5dRLUmBTAuMnaJoW8yu5+eW/bJ22jK4HLgkWNAsuPSB",
	"GLq9I0CYo9EZYJpSCMDugSzoAKvMgrbwIr59AV8a8kuo0WNFTJINUS/KcReZmqr3LehbZ61kV7h2piF2",
	"GbksVATZJDJCq20ltaXfdpW+U3+7xu+QHZgSbgUu1E5SJAgnk5M+UMeSMmA3HByJ/1m7VbRJNsYY69ro",
	"NDqd3Ie25DZkDzXIdlKJmt+lcmHbHDgP9LWOUd/2cNY2Eywkiqsgq1t5mWxGikEJIARd1YYgRWNgUeq0",
	"BE+18wztTlFGpvOcPFmGDemVYqr6HrTNPQb2TcqNp17W2zkhLSl9UE8CfzqZ/LDo7Yw0A0EUttFLT9x4",
	"u/Ivdd5TymYJs4aBSx1E3dYxVIRW2wK4RAaak19yKc9iYaFwLoMgp43AOPcAyDEgK/8gdz5uFZX80vrZ",
	"J1TV9y+x1oH8nDxkjoJ9wRCIKsktzKijuRR4NGYn0+9o1hRdnmu0Ot2b5mtZBWehbnztOnKZbC+kIp5m",
	"LJo/zdWgD+2x+0hJxw97Sb0nBgSjQ2w/re1TJp+6t0c0ii9quyn0rqLhTd2gNzpSY1sD217Idsp8DmI7",
	"4e7nKAPd3Wz5PJbdlPgd1Ez758PKcNlvos+t5d3Rptqa2r9HYj3hd+PH7kx2aHccbHtj2uPg2NEv1h2p",
	"Qo2FtvJ92l4DZz//GhD2sNBctm2qxFCuWwZ91WF/q/mrJOh6TIpiXlDX68SXEdSGMEjvYr8Eg7z6YOlq",
	"uq1CGU9rFwYquf24BwRLi4jYq+M40tKndkmucgr8xmXLHxa07bn5cXfylHnhsSfWkx969D7JrAIiyYIZ",
	"kYXujxBAm3U30UpBr3++gkQHkQ4aT5gtW9mMwNNc0yLeXyR7ofvvQO6gB+sWUDkfP/LPTk9/PssbV9Fm",
	"vly3fogXKsHMZcv2Eo5T0X72x5dDJ+BVtkYgdYAFanugGuRdi9JeSpsvgmmSGJeiKV3g6evJ60mCtU7m",
	"J/KJ928AAAD//2T8BzhAEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
